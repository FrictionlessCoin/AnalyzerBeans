<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns="http://maven.apache.org/FML/1.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
	title="Frequently Asked Questions" toplink="false">

	<part id="general">
		<title>General information</title>
		<faq id="whatis">
			<question>What is AnalyzerBeans?</question>
			<answer>
				<p>AnalyzerBeans is a framework for data analysis. It has been built
					by the authors of DataCleaner with their experience in mind from
					creating one of the most popular Open Source data profiling
					applications.</p>
			</answer>
		</faq>

		<faq id="why">
			<question>Why should I care about AnalyzerBeans?</question>
			<answer>
				<p>AnalyzerBeans is an interesting project because of it's focus on
				reusability of generic analysis components while still making it easy
				to develop new plug-in components that fit in to the same data flow as
				the built-in components. In fact all built-in components use the same
				API as any plugin would use. This hopefully prooves our concept:
				We want to provide a framework for data analysis that is high performing,
				flexible, intuitive and extensible.</p>
			</answer>
		</faq>

		<faq id="datastores">
			<question>Which types of datastores do AnalyzerBeans support?
			</question>
			<answer>
				<p>AnalyzerBeans is based on <a href="http://eobjects.org/metamodel">MetaModel</a> - a library for exploring
					almost any kind of datastore. Currently we support:</p>
				<ul>
					<li>
						Any
						<b>JDBC-compliant database</b>. In particular, we regularly use and test it with:
						<ul>
							<li>MySQL</li>
							<li>Postgresql</li>
							<li>Microsoft SQL Server</li>
							<li>Oracle</li>
							<li>Hsqldb, HyperSQL and H2</li>
							<li>Apache Derby</li>
						</ul>
					</li>
					<li>
						Microsoft Excel spreadsheets. Both in the old
						<b>(.xls)</b>
						and the new
						<b>(.xlsx)</b>
						format.
					</li>
					<li>
						Microsoft Access database-files (
						<b>.mdb</b>
						).
					</li>
					<li>
						Comma-separated files (
						<b>.csv</b>
						)and derivates (any text file with separators and quotation marks
						for tabular data).
					</li>
					<li>
						Fixed width value files (where line length is constant).
					</li>
					<li>
						SAS datasets (
						<b>.sas7bdat</b>
						)
					</li>
					<li>
						dBase databases (
						<b>.dbf</b>
						)
					</li>
					<li>
						OpenOffice database files (
						<b>.odb</b>
						)
					</li>
				</ul>
			</answer>
		</faq>

		<faq id="etl_comparison">
			<question>How does AnalyzerBeans compare to a typical ETL tool's
				functionality?</question>
			<answer>
				<p>This is a good question because in deed there are some ETL-like
					features in AnalyzerBeans which allow the user to perform various
					data preprocessing tasks before analysis.</p>
				<p>The major difference lies in the focus of the framework:</p>
				<ul>
					<li>AnalyzerBeans does not try to solve every data transformation
						issue there is. Rather we've chosen a subset that makes it
						sufficient for analysis purposes.</li>
					<li>AnalyzerBeans is tuned towards developer effeciency. It should
						be easy and unintrusive to your analysis logic to use the
						framework.</li>
					<li>By trimming down the list of requirements for the data flow
						mechanism it is possible to substantially boost performance.
						Because AnalyzerBeans is not a full-fledged ETL framework we're
						able to apply concurrency tricks that are otherwise impossible.</li>
				</ul>
			</answer>
		</faq>
		
		<faq id="datacleaner_comparison">
			<question>What is the relationship between AnalyzerBeans and DataCleaner?</question>
			<answer>
				<p>As of the upcoming version 2.0, <a href="http://datacleaner.eobjects.org">DataCleaner</a>
				will act as probably the typical user interface for AnalyzerBeans. It is however
				very important for both projects to avoid being inter-dependent, so that it's only
				DataCleaner using AnalyzerBeans as it's underlying engine and not the other way around.
				We are open for ideas on alternative user interfaces for AnalyzerBeans and included
				is actually also a simple command line interface to proof this concept.</p>
				
				<p>The nice thing about having DataCleaner as a project which uses AnalyzerBeans
				already from the beginning is that it makes a very effecient quality control which
				ensures that all needed functionality is actually included, because otherwise
				DataCleaner would not be functional from a user perspective. Therefore it is also
				typical that if you're a DataCleaner developer, then you're most likely also an 
				AnalyzerBeans developer.</p>
			</answer>
		</faq>
	</part>
</faqs>